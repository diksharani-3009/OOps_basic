{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red42\green49\blue64;\red245\green245\blue246;}
{\*\expandedcolortbl;;\cssrgb\c21569\c25490\c31765;\cssrgb\c96863\c96863\c97255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww25400\viewh16000\viewkind0
\deftab720
\pard\pardeftab720\sa400\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Q1. What is Abstraction in OOPs? Explain with an example.\
Abstraction in object-oriented programming refers to the process of hiding the internal complexities of an object and presenting only the essential features and functionalities to the user. It focuses on creating a simplified and high-level representation of an object, allowing users to interact with it without needing to understand its underlying implementation.\
Example:\
Let's consider a scenario of a bank account. From a user's perspective, they are primarily interested in functionalities such as depositing money, withdrawing money, and checking the account balance. The user doesn't need to know how these operations are implemented internally. The bank account can be represented as an abstract concept with methods like 
\f1\fs28 deposit()
\f0\fs32 , 
\f1\fs28 withdraw()
\f0\fs32 , and 
\f1\fs28 check_balance()
\f0\fs32 . The implementation details, such as how the account data is stored or how the calculations are performed, are hidden from the user. This abstraction allows users to focus on using the functionalities provided by the bank account object without worrying about the internal complexities.\
Q2. Differentiate between Abstraction and Encapsulation. Explain with an example.\
Abstraction and encapsulation are both fundamental concepts in object-oriented programming, but they serve different purposes:\
Abstraction involves hiding unnecessary details and providing a simplified and high-level view of an object's functionalities. It focuses on defining interfaces and exposing essential features, while hiding the internal implementation.\
Encapsulation, on the other hand, involves bundling data and methods together within a class and restricting access to the data by providing public methods. It focuses on data protection and ensures that the internal state of an object is accessed and modified through controlled mechanisms.\
Example:\
Let's consider the example of a car. Abstraction would involve defining the functionalities that a car provides, such as starting the engine, accelerating, and braking. These functionalities are abstracted to a higher level, and the user interacts with the car object through these defined methods without knowing the internal mechanisms of how the car operates.\
Encapsulation, on the other hand, would involve encapsulating the car's attributes (e.g., engine status, speed) and methods within a class. The data is protected and accessed through methods like 
\f1\fs28 start_engine()
\f0\fs32 , 
\f1\fs28 accelerate()
\f0\fs32 , and 
\f1\fs28 brake()
\f0\fs32 . These methods control the access to the internal state of the car object, ensuring that it is modified and accessed in a controlled manner.\
In summary, abstraction focuses on providing a simplified view of an object's functionalities, while encapsulation focuses on bundling data and methods together, and controlling access to the data.\
Q3. What is the abc module in Python? Why is it used?\
The 
\f1\fs28 abc
\f0\fs32  module in Python stands for "Abstract Base Classes." It provides the infrastructure for defining abstract base classes, which are classes that cannot be instantiated directly and are intended to be subclassed by other classes.\
The 
\f1\fs28 abc
\f0\fs32  module is used to create abstract base classes by inheriting from the 
\f1\fs28 ABC
\f0\fs32  (Abstract Base Class) class provided by the module. Abstract base classes serve as a way to define a common interface or contract that subclasses must adhere to. They allow defining methods that must be implemented by the subclasses, enforcing a certain structure and behavior.\
By using the 
\f1\fs28 abc
\f0\fs32  module, developers can create abstract base classes and define abstract methods that subclasses must implement. This promotes code organization, standardization, and helps in designing class hierarchies.\
Q4. How can we achieve data abstraction?\
Data abstraction can be achieved in object-oriented programming through the use of classes and objects. Here are some techniques to achieve data abstraction:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Encapsulation: Encapsulation involves bundling the data and related methods together within a class. The class encapsulates the data and provides methods to interact with that data, hiding the internal implementation details. By accessing the data through these methods, users can achieve data abstraction.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Access Modifiers: Access modifiers like public, private, and protected can be used to control the visibility and access to the class members. By making certain data private, we can restrict direct access and provide controlled access through getter and setter methods, enabling data abstraction.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Abstract Classes and Interfaces: Abstract classes and interfaces allow defining contracts or blueprints for classes. They can include abstract methods that must be implemented by the subclasses, ensuring that the essential behavior is provided while hiding the implementation details.\cb1 \
\pard\pardeftab720\sa400\partightenfactor0
\cf2 \cb3 Q5. Can we create an instance of an abstract class? Explain your answer.\
No, we cannot create an instance of an abstract class. An abstract class is a class that is meant to be subclassed and cannot be instantiated directly.\
An abstract class is created using the 
\f1\fs28 abc
\f0\fs32  module in Python by inheriting from the 
\f1\fs28 ABC
\f0\fs32  class and using the 
\f1\fs28 @abstractmethod
\f0\fs32  decorator to define abstract methods. Abstract methods are methods that have no implementation in the abstract class and must be implemented by the subclasses.\
The purpose of an abstract class is to define a common interface or contract for its subclasses, ensuring that they implement the required methods. Subclasses of an abstract class can be instantiated, and they provide the concrete implementation of the abstract methods defined in the abstract class.\
\pard\pardeftab720\partightenfactor0
\cf2 Attempting to create an instance of an abstract class directly will result in a 
\f1\fs28 TypeError
\f0\fs32 . The intention is to use the abstract class as a blueprint for creating subclasses and to provide a common structure and behavior among them.\
}